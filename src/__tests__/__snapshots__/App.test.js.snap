// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test <App /> component match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <React.Fragment>
        <GlobalStyleComponent />
        <Header />
        <UNDEFINED />
        <Route
          component={
            Object {
              "$$typeof": Symbol(react.memo),
              "WrappedComponent": [Function],
              "compare": null,
              "displayName": "Connect(Container)",
              "type": [Function],
              Symbol(Symbol.hasInstance): [Function],
            }
          }
          path="/movies-app"
        />
        <Route
          component={
            Object {
              "$$typeof": Symbol(react.memo),
              "WrappedComponent": [Function],
              "compare": null,
              "displayName": "Connect(Main)",
              "type": [Function],
              Symbol(Symbol.hasInstance): [Function],
            }
          }
          path="/movies-app"
        />
        <Switch>
          <Route
            exact={true}
            path="/"
            render={[Function]}
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(MoviesCards)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            path="/category"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(MoviesDetails)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            path="/movieDetails/:id"
          />
          <Route
            component={[Function]}
            path="/contest"
          />
          <Route
            component={[Function]}
            path="/about"
          />
          <Route
            component={[Function]}
            path="/contact"
          />
        </Switch>
        <Footer />
        <VerticleButton
          AnimationDuration={1000}
          EasingType="easeInQuint"
          ShowAtPosition={300}
        />
      </React.Fragment>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <GlobalStyleComponent />,
          <Header />,
          <UNDEFINED />,
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(Container)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            path="/movies-app"
          />,
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(Main)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            path="/movies-app"
          />,
          <Switch>
            <Route
              exact={true}
              path="/"
              render={[Function]}
            />
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(MoviesCards)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/category"
            />
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(MoviesDetails)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/movieDetails/:id"
            />
            <Route
              component={[Function]}
              path="/contest"
            />
            <Route
              component={[Function]}
              path="/about"
            />
            <Route
              component={[Function]}
              path="/contact"
            />
          </Switch>,
          <Footer />,
          <VerticleButton
            AnimationDuration={1000}
            EasingType="easeInQuint"
            ShowAtPosition={300}
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "displayName": "Connect(NavBar)",
            "type": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": Object {
              "$$typeof": Symbol(react.memo),
              "WrappedComponent": [Function],
              "compare": null,
              "displayName": "Connect(Container)",
              "type": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
            "path": "/movies-app",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": Object {
              "$$typeof": Symbol(react.memo),
              "WrappedComponent": [Function],
              "compare": null,
              "displayName": "Connect(Main)",
              "type": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
            "path": "/movies-app",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Route
                exact={true}
                path="/"
                render={[Function]}
              />,
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(MoviesCards)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                path="/category"
              />,
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(MoviesDetails)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                path="/movieDetails/:id"
              />,
              <Route
                component={[Function]}
                path="/contest"
              />,
              <Route
                component={[Function]}
                path="/about"
              />,
              <Route
                component={[Function]}
                path="/contact"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "exact": true,
                "path": "/",
                "render": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(MoviesCards)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
                "path": "/category",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(MoviesDetails)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
                "path": "/movieDetails/:id",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "path": "/contest",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "path": "/about",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "path": "/contact",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "AnimationDuration": 1000,
            "EasingType": "easeInQuint",
            "ShowAtPosition": 300,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <React.Fragment>
          <GlobalStyleComponent />
          <Header />
          <UNDEFINED />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(Container)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            path="/movies-app"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(Main)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            path="/movies-app"
          />
          <Switch>
            <Route
              exact={true}
              path="/"
              render={[Function]}
            />
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(MoviesCards)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/category"
            />
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(MoviesDetails)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/movieDetails/:id"
            />
            <Route
              component={[Function]}
              path="/contest"
            />
            <Route
              component={[Function]}
              path="/about"
            />
            <Route
              component={[Function]}
              path="/contact"
            />
          </Switch>
          <Footer />
          <VerticleButton
            AnimationDuration={1000}
            EasingType="easeInQuint"
            ShowAtPosition={300}
          />
        </React.Fragment>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <GlobalStyleComponent />,
            <Header />,
            <UNDEFINED />,
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Container)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/movies-app"
            />,
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Main)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/movies-app"
            />,
            <Switch>
              <Route
                exact={true}
                path="/"
                render={[Function]}
              />
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(MoviesCards)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                path="/category"
              />
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(MoviesDetails)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                path="/movieDetails/:id"
              />
              <Route
                component={[Function]}
                path="/contest"
              />
              <Route
                component={[Function]}
                path="/about"
              />
              <Route
                component={[Function]}
                path="/contact"
              />
            </Switch>,
            <Footer />,
            <VerticleButton
              AnimationDuration={1000}
              EasingType="easeInQuint"
              ShowAtPosition={300}
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": Object {
              "$$typeof": Symbol(react.memo),
              "WrappedComponent": [Function],
              "compare": null,
              "displayName": "Connect(NavBar)",
              "type": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(Container)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
              "path": "/movies-app",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(Main)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
              "path": "/movies-app",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Route
                  exact={true}
                  path="/"
                  render={[Function]}
                />,
                <Route
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "WrappedComponent": [Function],
                      "compare": null,
                      "displayName": "Connect(MoviesCards)",
                      "type": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    }
                  }
                  path="/category"
                />,
                <Route
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "WrappedComponent": [Function],
                      "compare": null,
                      "displayName": "Connect(MoviesDetails)",
                      "type": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    }
                  }
                  path="/movieDetails/:id"
                />,
                <Route
                  component={[Function]}
                  path="/contest"
                />,
                <Route
                  component={[Function]}
                  path="/about"
                />,
                <Route
                  component={[Function]}
                  path="/contact"
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "exact": true,
                  "path": "/",
                  "render": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(MoviesCards)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  },
                  "path": "/category",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(MoviesDetails)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  },
                  "path": "/movieDetails/:id",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "path": "/contest",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "path": "/about",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "path": "/contact",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "AnimationDuration": 1000,
              "EasingType": "easeInQuint",
              "ShowAtPosition": 300,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": Symbol(react.fragment),
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
